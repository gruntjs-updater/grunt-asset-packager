'use strict';

var grunt = require('grunt');

/*
======== A Handy Little Nodeunit Reference ========
https://github.com/caolan/nodeunit

Test methods:
test.expect(numAssertions)
test.done()
Test assertions:
test.ok(value, [message])
test.equal(actual, expected, [message])
test.notEqual(actual, expected, [message])
test.deepEqual(actual, expected, [message])
test.notDeepEqual(actual, expected, [message])
test.strictEqual(actual, expected, [message])
test.notStrictEqual(actual, expected, [message])
test.throws(block, [error], [message])
test.doesNotThrow(block, [error], [message])
test.ifError(value)
*/

exports.asset_packager = {
	setUp: function (done) {
		// setup here if necessary
		done();
	},
	dev: function (test) {
		test.expect(4);

		test.ok(grunt.file.exists('tmp/static/dev'), 'should create dev directory.');

		test.ok(grunt.file.exists('tmp/static/dev/index.html'), 'should copy index.html.');
		test.equal(grunt.file.read('tmp/static/dev/index.html'), grunt.file.read('test/expected/static/dev/index.html'), 'should correctly format index.html');

		var jsFilesExist = grunt.file.exists('tmp/static/dev/js/file1.js') && grunt.file.exists('tmp/static/dev/js/file2.js');
		test.ok(jsFilesExist, 'should copy js files');

		test.done();
	},
	prod: function (test) {
		test.expect(11);

		test.ok(grunt.file.exists('tmp/static/prod'), 'should create dev directory.');

		test.ok(grunt.file.exists('tmp/static/prod/index.html'), 'should copy index.html.');
		test.equal(grunt.file.read('tmp/static/prod/index.html'), grunt.file.read('test/expected/static/prod/index.html'), 'should correctly format index.html');

		test.ok(grunt.file.exists('tmp/static/prod/js/common.js'), 'should create packaged js file');
		test.ok(grunt.file.exists('tmp/static/prod/css/common.css'), 'should create packaged css file');

		var actualJSLines = grunt.file.read('tmp/static/prod/js/common.js').split(grunt.util.linefeed),
		    expectedJSLines = grunt.file.read('test/expected/static/prod/js/common.js').split(grunt.util.linefeed);

		test.equal(actualJSLines.length, 2, 'packaged js should contain 2 lines.');
		test.equal(actualJSLines[1], expectedJSLines[1], 'should concat and uglify javascript');
		test.ok(/\/\/Generated by grunt-asset-packager at \d\d-\d\d-\d\d\d\d \d?\d:\d\d:\d\d [A|P]M/.test(actualJSLines[0]), 'should include banner in packaged javascript');

		var actualCSSLines = grunt.file.read('tmp/static/prod/css/common.css').split(grunt.util.linefeed),
		    expectedCSSLines = grunt.file.read('test/expected/static/prod/css/common.css').split(grunt.util.linefeed);

		test.equal(actualCSSLines.length, 2, 'packaged css should contain 2 lines.');
		test.equal(actualCSSLines[1], expectedCSSLines[1], 'should concat and minify css');

		test.ok(grunt.file.exists('tmp/static/prod/js/concatenated.js'));

		test.done();
	}
};
